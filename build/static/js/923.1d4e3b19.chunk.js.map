{"version":3,"file":"static/js/923.1d4e3b19.chunk.js","mappings":"2NAaMA,EAAeC,EAAAA,KAAaC,MAAM,CACtCC,MAAOF,EAAAA,KAAaG,IAAI,EAAG,cAAcC,IAAI,GAAI,aAAaC,SAAS,YACvEC,YAAaN,EAAAA,KAAaG,IAAI,EAAG,cAAcC,IAAI,GAAI,aAAaC,SAAS,cA+D/E,WAAeE,EAAAA,EAAAA,IA5Df,WACE,IAAAC,GAAyBC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,CAAK,IAA/CC,EAAKH,EAALG,MAAOC,EAAOJ,EAAPI,QAETC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACbjB,MAAO,GACPI,YAAa,IAEfc,iBAAkBrB,EAClBsB,SAAU,SAACC,GACT,IAAIC,EAAKC,KAAKC,MAAsB,IAAhBD,KAAKE,UACzBb,GAASc,EAAAA,EAAAA,IAAW,CAAEJ,GAAAA,EAAIrB,MAAOoB,EAAOpB,MAAOI,YAAagB,EAAOhB,eAChEsB,SACAC,MAAK,WACJd,EAAS,IACX,IACCe,OAAM,SAACnB,GACNoB,QAAQC,IAAIrB,EACd,GACJ,IAEF,OACEsB,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACvB,MAAOA,EAAOC,QAASA,EAAQuB,UACtCC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAAChB,SAAUJ,EAAOqB,aAAaH,SAAA,EAClCC,EAAAA,EAAAA,MAACC,EAAAA,EAAKE,MAAK,CAACC,UAAU,OAAOC,UAAU,4BAA2BN,SAAA,EAChEF,EAAAA,EAAAA,KAACI,EAAAA,EAAKK,MAAK,CAAAP,SAAC,YACZF,EAAAA,EAAAA,KAACI,EAAAA,EAAKM,QAAO,CACXC,KAAK,OACLC,YAAY,cACZC,KAAK,QACLC,SAAU9B,EAAO+B,aACjBC,MAAOhC,EAAOK,OAAOpB,MACrBgD,YAAajC,EAAOkC,OAAOjD,SAE7B+B,EAAAA,EAAAA,KAACI,EAAAA,EAAKM,QAAQS,SAAQ,CAACR,KAAK,UAAST,SAAElB,EAAOkC,OAAOjD,QAA+B,QAEtFkC,EAAAA,EAAAA,MAACC,EAAAA,EAAKE,MAAK,CAACC,UAAU,OAAOC,UAAU,+BAA8BN,SAAA,EACnEF,EAAAA,EAAAA,KAACI,EAAAA,EAAKK,MAAK,CAAAP,SAAC,oBACZF,EAAAA,EAAAA,KAACI,EAAAA,EAAKM,QAAO,CACXU,GAAG,WACHC,KAAM,EACNP,SAAU9B,EAAO+B,aACjBF,KAAK,cACLG,MAAOhC,EAAOK,OAAOhB,YACrB4C,YAAajC,EAAOkC,OAAO7C,eAE7B2B,EAAAA,EAAAA,KAACI,EAAAA,EAAKM,QAAQS,SAAQ,CAACR,KAAK,UAAST,SAAElB,EAAOkC,OAAO7C,cAAqC,QAE5F2B,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACtB,QAASA,EAASD,MAAOA,EAAMwB,UACtCF,EAAAA,EAAAA,KAACsB,EAAAA,EAAM,CAACC,QAAQ,UAAUZ,KAAK,SAAQT,SAAC,iBAOlD,G,wFC3Ee,SAAS5B,EAAekD,GACrC,OAAO,SAACC,GAEN,OADuBjD,EAAAA,EAAAA,KAAY,SAAAkD,GAAa,OAAAA,EAAVC,UAA2B,IAA3DC,cACgB5B,EAAAA,EAAAA,KAACwB,GAASK,EAAAA,EAAAA,GAAA,GAAKJ,KAAYzB,EAAAA,EAAAA,KAAA,OAAAE,SAAK,iBACxD,CACF,C","sources":["pages/Add.jsx","pages/authentication.js"],"sourcesContent":["//import hooks\r\nimport { insertPost } from \"../global-state/postSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useFormik } from \"formik\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n//import components\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport Loading from \"./Loading\";\r\nimport * as Yup from \"yup\";\r\nimport authentication from \"./authentication\";\r\n\r\nconst SignupSchema = Yup.object().shape({\r\n  title: Yup.string().min(2, \"Too Short!\").max(50, \"Too Long!\").required(\"Required\"),\r\n  description: Yup.string().min(2, \"Too Short!\").max(50, \"Too Long!\").required(\"Required\"),\r\n});\r\n\r\nfunction Add() {\r\n  let { error, loading } = useSelector((state) => state);\r\n\r\n  let dispatch = useDispatch();\r\n  let navigate = useNavigate();\r\n\r\n  let formik = useFormik({\r\n    initialValues: {\r\n      title: \"\",\r\n      description: \"\",\r\n    },\r\n    validationSchema: SignupSchema,\r\n    onSubmit: (values) => {\r\n      let id = Math.floor(Math.random() * 1000);\r\n      dispatch(insertPost({ id, title: values.title, description: values.description }))\r\n        .unwrap()\r\n        .then(() => {\r\n          navigate(\"/\");\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    },\r\n  });\r\n  return (\r\n    <Loading error={error} loading={loading}>\r\n      <Form onSubmit={formik.handleSubmit}>\r\n        <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\r\n          <Form.Label>Title </Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Enter Title\"\r\n            name=\"title\"\r\n            onChange={formik.handleChange}\r\n            value={formik.values.title}\r\n            isInvalid={!!formik.errors.title}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">{formik.errors.title}</Form.Control.Feedback>{\" \"}\r\n        </Form.Group>\r\n        <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\r\n          <Form.Label>Description...</Form.Label>\r\n          <Form.Control\r\n            as=\"textarea\"\r\n            rows={3}\r\n            onChange={formik.handleChange}\r\n            name=\"description\"\r\n            value={formik.values.description}\r\n            isInvalid={!!formik.errors.description}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">{formik.errors.description}</Form.Control.Feedback>{\" \"}\r\n        </Form.Group>\r\n        <Loading loading={loading} error={error}>\r\n          <Button variant=\"primary\" type=\"submit\">\r\n            submit\r\n          </Button>\r\n        </Loading>\r\n      </Form>\r\n    </Loading>\r\n  );\r\n}\r\nexport default authentication(Add);\r\n","import { useSelector } from \"react-redux\";\r\n\r\nexport default function authentication(Component) {\r\n  return (props) => {\r\n    let { isLoggiedind } = useSelector(({ toggleauth }) => toggleauth);\r\n    return isLoggiedind ? <Component {...props} /> : <div>Log In First </div>;\r\n  };\r\n}\r\n"],"names":["SignupSchema","Yup","shape","title","min","max","required","description","authentication","_useSelector","useSelector","state","error","loading","dispatch","useDispatch","navigate","useNavigate","formik","useFormik","initialValues","validationSchema","onSubmit","values","id","Math","floor","random","insertPost","unwrap","then","catch","console","log","_jsx","Loading","children","_jsxs","Form","handleSubmit","Group","className","controlId","Label","Control","type","placeholder","name","onChange","handleChange","value","isInvalid","errors","Feedback","as","rows","Button","variant","Component","props","_ref","toggleauth","isLoggiedind","_objectSpread"],"sourceRoot":""}