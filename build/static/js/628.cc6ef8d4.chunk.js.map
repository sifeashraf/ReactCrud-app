{"version":3,"file":"static/js/628.cc6ef8d4.chunk.js","mappings":"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","sources":["Hooks/use-post-details.js","pages/Edit.jsx","pages/authentication.js"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchpost } from \"../global-state/postSlice\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function usePostDetails() {\r\n  let { id } = useParams();\r\n  let dispatch = useDispatch();\r\n  let { loading, record, error } = useSelector((data) => data.postsreducer);\r\n  useEffect(() => {\r\n    dispatch(fetchpost(id));\r\n  }, [id]);\r\n  return { loading, record, error };\r\n}\r\n","//import hooks\r\nimport usePostDetails from \"../Hooks/use-post-details\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { editPost, clearRecord } from \"../global-state/postSlice\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport * as Yup from \"yup\";\r\n\r\n//import components\r\nimport authentication from \"./authentication\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport Loading from \"./Loading\";\r\n// import module\r\nimport { useFormik } from \"formik\";\r\n\r\nconst SignupSchema = Yup.object().shape({\r\n  title: Yup.string().min(2, \"Too Short!\").max(50, \"Too Long!\").required(\"Required\"),\r\n  description: Yup.string().min(2, \"Too Short!\").max(50, \"Too Long!\").required(\"Required\"),\r\n});\r\nfunction Edit() {\r\n  let { loading, record, error } = usePostDetails();\r\n\r\n  let navigate = useNavigate();\r\n  let dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(clearRecord());\r\n  }, [dispatch]);\r\n\r\n  let formik = useFormik({\r\n    initialValues: {\r\n      title: record ? record.title : \"\",\r\n      description: record ? record.description : \"\",\r\n    },\r\n    enableReinitialize: true,\r\n    validationSchema: SignupSchema,\r\n    onSubmit: (values) => {\r\n      dispatch(editPost({ id: record.id, title: values.title, description: values.description }))\r\n        .unwrap()\r\n        .then(() => navigate(\"/\"));\r\n    },\r\n  });\r\n\r\n  return (\r\n    <Loading loading={loading} error={error}>\r\n      <Form onSubmit={formik.handleSubmit}>\r\n        <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\r\n          <Form.Label>Title </Form.Label>\r\n          <Form.Control\r\n            type=\"email\"\r\n            name=\"title\"\r\n            onChange={formik.handleChange}\r\n            value={formik.values.title}\r\n            isInvalid={!!formik.errors.title}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\r\n          <Form.Label>Description...</Form.Label>\r\n          <Form.Control\r\n            as=\"textarea\"\r\n            rows={3}\r\n            onChange={formik.handleChange}\r\n            name=\"description\"\r\n            value={formik.values.description}\r\n            isInvalid={!!formik.errors.description}\r\n          />\r\n        </Form.Group>\r\n        <Loading loading={loading} error={error}>\r\n          <Button variant=\"primary\" type=\"submit\">\r\n            submit\r\n          </Button>\r\n        </Loading>\r\n      </Form>\r\n    </Loading>\r\n  );\r\n}\r\nexport default authentication(Edit);\r\n","import { useSelector } from \"react-redux\";\r\n\r\nexport default function authentication(Component) {\r\n  return (props) => {\r\n    let { isLoggiedind } = useSelector(({ toggleauth }) => toggleauth);\r\n    return isLoggiedind ? <Component {...props} /> : <div>Log In First </div>;\r\n  };\r\n}\r\n"],"names":["usePostDetails","id","useParams","dispatch","useDispatch","_useSelector","useSelector","data","postsreducer","loading","record","error","useEffect","fetchpost","SignupSchema","Yup","shape","title","min","max","required","description","authentication","_usePostDetails","navigate","useNavigate","clearRecord","formik","useFormik","initialValues","enableReinitialize","validationSchema","onSubmit","values","editPost","unwrap","then","_jsx","Loading","children","_jsxs","Form","handleSubmit","Group","className","controlId","Label","Control","type","name","onChange","handleChange","value","isInvalid","errors","as","rows","Button","variant","Component","props","_ref","toggleauth","isLoggiedind","_objectSpread"],"sourceRoot":""}